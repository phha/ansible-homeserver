---
# task file for paperless

- name: Create paperless directories
  file:
    path: "{{ item }}"
    state: directory
  loop:
    - "{{ paperless_data_directory }}/data"
    - "{{ paperless_data_directory }}/media"
    - "{{ paperless_consume_directory }}"

- name: Create paperless export directory
  when: (paperless_export_enabled | default(False))
  file:
    path: "{{ paperless_export_directory }}"
    state: directory

- name: paperless docker container
  docker_container:
    name: "{{ paperless_container_name }}"
    image: "{{ paperless_container_image }}"
    command: ["gunicorn", "-b", "0.0.0.0:8000"]
    recreate: true
    state: started
    container_default_behavior: no_defaults
    networks_cli_compatible: no
    restart_policy: unless-stopped
    pull: "{{ 'upgrade' in ansible_run_tags }}"
    env:
      TZ: "{{ timezone }}"
      USERMAP_UID: "{{ paperless_uid }}"
      USERMAP_GID: "{{ paperless_gid }}"
    volumes:
      - "{{ paperless_data_directory }}/data:/usr/src/paperless/data"
      - "{{ paperless_data_directory }}/media:/usr/src/paperless/media"
    labels:
      traefik.enable: "{{ paperless_expose }}"
      traefik.http.routers.paperless.tls: "true"
      traefik.http.routers.paperless.rule: "{{ paperless_traefik_rule }}"
      traefik.http.routers.paperless.tls.certresolver: letsencrypt
      traefik.http.routers.paperless.middlewares: frame-allow@file
      traefik.http.services.paperless.loadbalancer.server.port: "8000"
    networks:
      - name: "{{ traefik_network_name }}"
        aliases:
          - "{{ traefik_container_name }}"
      - name: "{{ internal_network_name }}"

- name: paperless consumer
  docker_container:
    name: "{{ paperless_container_name }}_consumer"
    image: "{{ paperless_container_image }}"
    command: "document_consumer"
    recreate: true
    state: started
    container_default_behavior: no_defaults
    networks_cli_compatible: no
    restart_policy: unless-stopped
    pull: "{{ 'upgrade' in ansible_run_tags }}"
    env:
      TZ: "{{ timezone }}"
      USERMAP_UID: "{{ paperless_uid }}"
      USERMAP_GID: "{{ paperless_gid }}"
      PAPERLESS_OCR_THREADS: "{{ paperless_ocr_threads }}"
      PAPERLESS_OCR_LANGUAGE: "{{ paperless_ocr_language }}"
      PAPERLESS_OCR_LANGUAGES: "{{ paperless_ocr_languages }}"
      PAPERLESS_FORGIVING_OCR: "{{ paperless_forgiving_ocr }}"
      PAPERLESS_CONSUME_MAIL_HOST: "{{ paperless_consume_mail_host }}"
      PAPERLESS_CONSUME_MAIL_PORT: "{{ paperless_consume_mail_port }}"
      PAPERLESS_CONSUME_MAIL_USER: "{{ paperless_consume_mail_user }}"
      PAPERLESS_CONSUME_MAIL_PASS: "{{ paperless_consume_mail_pass }}"
      PAPERLESS_EMAIL_SECRET: "{{ paperless_consume_email_secret }}"
    volumes:
      - "{{ paperless_data_directory }}/data:/usr/src/paperless/data"
      - "{{ paperless_data_directory }}/media:/usr/src/paperless/media"
      - "{{ paperless_consume_directory }}:/consume"
    networks:
      - name: "{{ internal_network_name }}"

- name: paperless exporter
  when: (paperless_export_enabled | default(False))
  docker_container:
    name: "{{ paperless_container_name }}_exporter"
    image: "{{ paperless_container_image }}"
    entrypoint: |
        bash -c 'bash -s <<EOF
        trap "break;exit" SIGHUP SIGINT SIGTERM
        while /bin/true; do
            sleep $PAPERLESS_EXPORT_SLEEP
            /usr/src/paperless/src/manage.py document_exporter /export
        done
        EOF'
    recreate: true
    state: started
    container_default_behavior: no_defaults
    networks_cli_compatible: no
    restart_policy: unless-stopped
    pull: "{{ 'upgrade' in ansible_run_tags }}"
    env:
      TZ: "{{ timezone }}"
      USERMAP_UID: "{{ paperless_uid }}"
      USERMAP_GID: "{{ paperless_gid }}"
      PAPERLESS_EXPORT_SLEEP: "{{ paperless_export_sleep }}"
    volumes:
      - "{{ paperless_data_directory }}/data:/usr/src/paperless/data"
      - "{{ paperless_data_directory }}/media:/usr/src/paperless/media"
      - "{{ paperless_export_directory }}:/export"
    networks:
      - name: "{{ internal_network_name }}"
