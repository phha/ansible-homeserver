---
# task file for paperless_ng

- name: directories
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ paperless_ng_uid }}"
    group: "{{ paperless_ng_gid }}"
  loop:
    - "{{ paperless_ng_data_directory }}"
    - "{{ paperless_ng_media_directory }}"
    - "{{ paperless_ng_consume_directory }}"
    - "{{ paperless_ng_export_directory }}"

- name: postgresql directory
  file:
    path: "{{ paperless_ng_db_directory }}"
    state: directory
    owner: "999"
    group: "999"

- name: compose
  docker_compose:
    project_name: "{{ paperless_ng_project_name }}"
    pull: "{{ 'upgrade' in ansible_run_tags }}"
    definition:
    definition:
      version: "3.5"
      networks:
        traefik_public:
          external: true
        paperless_ng:
          driver: overlay
          internal: true
          name: paperless_ng
          attachable: false
      services:
        paperless_ng_redis:
          container_name: "{{ paperless_ng_redis_container_name }}"
          image: "{{ paperless_ng_redis_container_image }}"
          restart: "{{ paperless_ng_redis_restart_policy }}"
          networks:
            - paperless_ng
        paperless_ng_postgres:
          container_name: "{{ paperless_ng_postgres_container_name }}"
          image: "{{ paperless_ng_postgres_container_image }}"
          restart: "{{ paperless_ng_postgres_restart_policy }}"
          volumes:
            - "{{ paperless_ng_db_directory }}:/var/lib/postgresql/data"
          environment:
            - "POSTGRES_DB={{ paperless_ng_postgres_db }}"
            - "POSTGRES_USER={{ paperless_ng_postgres_user }}"
            - "POSTGRES_PASSWORD={{ paperless_ng_postgres_password }}"
          networks:
            - paperless_ng
        paperless_ng:
          container_name: "{{ paperless_ng_container_name }}"
          image: "{{ paperless_ng_container_image }}"
          restart: "{{ paperless_ng_restart_policy }}"
          environment:
            - "TZ={{ timezone }}"
            - "USERMAP_UID={{ paperless_ng_uid }}"
            - "USERMAP_GID={{ paperless_ng_gid }}"
            - "PAPERLESS_OCR_THREADS={{ paperless_ng_ocr_threads }}"
            - "PAPERLESS_OCR_LANGUAGE={{ paperless_ng_ocr_language }}"
            - "PAPERLESS_OCR_LANGUAGES={{ paperless_ng_ocr_languages }}"
            - "PAPERLESS_SECRET_KEY={{ paperless_ng_secret_key }}" 
            - "PAPERLESS_ALLOWED_HOSTS={{ paperless_ng_allowed_hosts }}"
            - "PAPERLESS_FILENAME_FORMAT={{ paperless_ng_filename_format }}"
            - "PAPERLESS_REDIS=redis://{{ paperless_ng_redis_container_name }}:6379"
            - "PAPERLESS_DBHOST={{ paperless_ng_postgres_container_name }}"
            - "PAPERLESS_DBNAME={{ paperless_ng_postgres_db }}"
            - "PAPERLESS_DBUSER={{ paperless_ng_postgres_user }}"
            - "PAPERLESS_DBPASS={{ paperless_ng_postgres_password }}"
          volumes:
            - "{{ paperless_ng_data_directory }}:/usr/src/paperless/data"
            - "{{ paperless_ng_media_directory }}:/usr/src/paperless/media"
            - "{{ paperless_ng_consume_directory }}:/usr/src/paperless/consume"
            - "{{ paperless_ng_export_directory }}:/usr/src/paperless/export"
          labels:
            - "traefik.enable={{ paperless_ng_expose }}"
            - "traefik.http.routers.paperless_ng.tls=true"
            - "traefik.http.routers.paperless_ng.rule={{ paperless_ng_traefik_rule }}"
            - "traefik.http.routers.paperless_ng.tls.certresolver=letsencrypt"
            - "traefik.http.routers.paperless_ng.middlewares=frame-allow@file"
            - "traefik.http.services.paperless_ng.loadbalancer.server.port=8000"
          networks:
            - paperless_ng
            - traefik_public
        export:
          container_name: "{{ paperless_ng_export_container_name }}"
          image: "{{ paperless_ng_container_image }}"
          entrypoint: |
              bash -c 'bash -s <<EOF
              trap "break;exit" SIGHUP SIGINT SIGTERM
              while /bin/true; do
                  python3 /usr/src/paperless/src/manage.py document_exporter /export
                  sleep $$PAPERLESS_NG_EXPORT_SLEEP
              done
              EOF'
          restart: "{{ paperless_ng_export_restart_policy }}"
          environment:
            - "TZ={{ timezone }}"
            - "USERMAP_UID={{ paperless_ng_export_uid }}"
            - "USERMAP_GID={{ paperless_ng_export_gid }}"
            - "PAPERLESS_OCR_THREADS={{ paperless_ng_ocr_threads }}"
            - "PAPERLESS_OCR_LANGUAGE={{ paperless_ng_ocr_language }}"
            - "PAPERLESS_OCR_LANGUAGES={{ paperless_ng_ocr_languages }}"
            - "PAPERLESS_SECRET_KEY={{ paperless_ng_secret_key }}" 
            - "PAPERLESS_ALLOWED_HOSTS={{ paperless_ng_allowed_hosts }}"
            - "PAPERLESS_FILENAME_FORMAT={{ paperless_ng_filename_format }}"
            - "PAPERLESS_REDIS=redis://{{ paperless_ng_redis_container_name }}:6379"
            - "PAPERLESS_DBHOST={{ paperless_ng_postgres_container_name }}"
            - "PAPERLESS_DBNAME={{ paperless_ng_postgres_db }}"
            - "PAPERLESS_DBUSER={{ paperless_ng_postgres_user }}"
            - "PAPERLESS_DBPASS={{ paperless_ng_postgres_password }}"
            - "PAPERLESS_NG_EXPORT_SLEEP={{ paperless_ng_export_sleep }}"
          volumes:
            - "{{ paperless_ng_data_directory }}:/usr/src/paperless/data"
            - "{{ paperless_ng_media_directory }}:/usr/src/paperless/media"
            - "{{ paperless_ng_consume_directory }}:/usr/src/paperless/consume"
            - "{{ paperless_ng_export_directory }}:/usr/src/paperless/export"
          networks:
            - paperless_ng

- name: wait
  pause:
    seconds: 10

- name: superuser
  expect:
    command: "docker exec -it {{ paperless_ng_container_name }} python3 /usr/src/paperless/src/manage.py createsuperuser"
    timeout: 10
    responses:
      "Username ": "{{ paperless_ng_superuser_name }}"
      "Email": "{{ paperless_ng_superuser_mail }}"
      "Password": "{{ paperless_ng_superuser_password }}"
      "Bypass": "y"
      "Error": "\003"
  ignore_errors: yes
  no_log: true
